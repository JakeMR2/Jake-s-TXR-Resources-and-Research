// Made by JakeMR2
//Struct size per car is 7168 bytes, total cars is 263
#pragma pattern_limit 0xf00000

struct Car_Base {
    char CarString[8];
    u32 float0x8;
    float float0xc;
    float floatx10;
    float floatx14;
    float flaotx18;
    float floatx1c;
    float floatx20;
    float FrontDrag;
    float RearDrag;
    float floatx2c;
    float floatx30;
    float RollOverChance;
    float unkForce;
    float unkForce2;
    float floatx44;
    float floatx48;
    float floatx4c;
    float  floatx50;
    float floatx54;
    float floatx58;
    float floatx5c;
    float floatx60;
    float FrontCamber;
    float FrontToe;
    float floatx6c;
    float floatx70;
    float floatx74;
    float floatx78;
    float floatx7c;
    float floatx80;
    float floatx84;
    float floatx88;
    float floatx8c;
    float floatx90;
    float floatx94;
    float floatx98;
    float FrontRideHeight;
    float floatx100;
    float RearCamber;
    float RearToe;
    float floatx10c;
    float floatx110;
    float floastx114;
    float floatx118;
    float floatx11c;
    float floatx120;
    float floastx124;
    float floatx128;
    float floastx12c;
    float floatx130;
    float floatx134;
    float floatx138;
    float floatx13c;
    float floatx140;
    float FrontSpring;
    float floatx148;
    float floatx14c;
    float floatx150;
    float floatx154;
    float RearSpring;
    float floatx15c;
    float floatx160;
    float floatx164;
    float floatx168;
    float floatx16c;
    float floatx170;
    float floatx174;
    u8 arrayByte[4];
    float flaotx17c;
    float floatx180;
    float floatx184;
    u8 arrayByte1[4];
    float front_rigidity;
    float rear_rigidity;
    float floatx194;
    float floatx198;
    float floatx19c;
    float floatx200;
    float floatx204;
    float floatx208;
    float floatx20c;
    float floatx210;
    float floatx214;
    float floatx218;
    float floatx21c;
    float floatx220;
    float floatx224;
    u32  lsd_type;
    u32 intx22c;
    float floatx230;
};
struct stock_transmission {
    u32 num_gears;
    float final_gear;
    float clutch;
    float shift_maybe;
    float rev_gear;
    float fisrt_gear;
    float second_gear;
    float third_gear;
    float fourth_gear;
    float fifth_gear;
    float sixth_gear; 
    float seveth_gear; //unused
    float cvt_effect;
};
struct car_base2 {
    float rpm1;
    float rpm2;
    float rpm3;
    float rpm4;
    float rpm5;
    float rpm6;
    float rpm7;
    float rpm8;
    float rpm9;
    float rpm10;
    float rpm11;
    float rpm12;
    float rpm13;
    float rpm14;
    float rpm15;
    float rpm16;
    float rpm17;
    float rpm18;
    float rpm19;
    float rpm20;
    float rpm21;
    float rpm22;
    float rpm23;
    float rpm24;
    float rpm25;
    float rpm26;
    float rpm27;
};
struct car_base3 {
    float floatx0;
    float Weight;
    float wheel_offset;
    float front_wheel_offset;
    float rear_wheel_offset;
    float floatx14;
    float floatx18;
    float floatx1c;
    float floatx20;
    float floatx24;
    float floatx28;
    float floatx2c;
    float floatx30;
    float floatx34;
    float floatx38;
    float floatx3c;
    float floatx40;
    float floatx44;
    float idleRPM;
    float floatx4c;
    float floatx50;
    float floatx54;
    float SteeringGamma;
    float SteeringDampening;
    float SteeringRate;
    float SteeringAngle;
    float floatx68;
    float floatx6c;
};
struct CarDescriptors {
    char CarName[8];
    u32 engineCC;
    float power;
    float powerRPM;
    float torque;
    float torqueRPM;
    float reverse_gear;
    float first_gear;
    float second_gear;
    float third_gear;
    float fourth_gear;
    float fifth_gear;
    float sixth_gear;
    float seventh_gear;
    float unk;
    float final_gear;
    u32 drivetrain;
    u32 weight;
    u32 carDimensions[3];
    u32 gearCount;
    u32 carPrice;
    u32 carCategory;
    u32 unk1;
    u32 unk2;
    u32 unk3;
    u8 aero_avail[4];
    u8 aero_maker;
    u8 manufacturer;
    u8 drive_type;
    u8 unk4;
};
struct CarName {
    char Name[23];
    u8 pad;
};
struct engine {
    char name[8];
    float unk1;
    float gaugeRPM;
    float gaugeRPM_1;
    float maxRPM;
    float power;
    float rpm1;
    float rpm2;
    float rpm3;
    float rpm4;
    float rpm5;
    float rpm6;
    float rpm7;
    float rpm8;
    float rpm9;
    float rpm10;
    float rpm11;
    float rpm12;
    float rpm13;
    float rpm14;
    float rpm15;
    float rpm16;
    float rpm17;
    float rpm18;
    float rpm19;
    float rpm20;
    float rpm21;
    float rpm22;
    float rpm23;
    float rpm24;
    float rpm25;
    float rpm26;
    float rpm27;
    float rpm28;
    float rpm29;
    float rpm30;
    float rpm31;
    float rpm32;
    float unk2;
    float unk3;
    float unk4;
    float unk5;
    float unk6;
    float unk7;
    float unk8;
    float unk9;
    float unk10;
    float unk11;
    float unk12;
    u8 tach_type[4];
};
struct Engines {
    engine Engine[11];
};
struct tires {
    char name[8];
    float unk1;
    float unk2;
    float unk3;
    float unk4;
    float unk5;
    float unk6;
    float unk7;
    float unk8;
    float unk9;
    float unk10;
    float tire_width;
    float unk12;
    float unk13;
    float unk14;
    float GripLossForward;
    float GripLateral;
    float unk17;
    float unk18;
    float unk19;
    float unk20;
    float unk21;
};
struct Tires {
tires Tires[42];
};
struct CarCol {
    char name[8];
};

struct Car_Color {
    u16 hue_2tone;
    u8 saturation_2tone;
    u8 brightness_2tone;
    u16 hue;
    u8 saturation;
    u8 brightness;
    u8 pad[3];
    u8 unk;
    u8 padd[3];
};
struct Color {
    Car_Color color[13];
    u8 unkVars[13];
    u32 MaxColors;
};
struct whl_color {
    char name[8];
    u8 color[36];
    u8 padding_bytes[12];
};

struct MainData {
    Car_Base car_base;
    stock_transmission transmission;
    car_base2 Car_Base2;
    car_base3 Car_Base3;
    CarDescriptors descriptors;
    CarName name;
    Engines engine;
    Tires tires;
    CarCol col_name;
    Color color;
    whl_color wheel_color;
};
struct Data {
    MainData data[264];
};


Data data @ 0x00;